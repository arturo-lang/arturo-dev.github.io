callFunction	vm/exec.html#callFunction.t,Value,string	exec: callFunction(f: Value; fnName: string = &quot;&lt;closure&gt;&quot;): untyped	
callInternal	vm/exec.html#callInternal.t,string,bool,varargs[Value]	exec: callInternal(fname: string; getValue: bool; args: varargs[Value]): untyped	
prepareLeakless	vm/exec.html#prepareLeakless.t,ValueArray	exec: prepareLeakless(protected: ValueArray): untyped	
finalizeLeakless	vm/exec.html#finalizeLeakless.t	exec: finalizeLeakless(): untyped	
handleBranching	vm/exec.html#handleBranching.t,untyped,untyped	exec: handleBranching(tryDoing, finalize: untyped): untyped	
execUnscoped	vm/exec.html#execUnscoped.t	exec: execUnscoped(input: Translation or Value)	
execInternal	vm/exec.html#execInternal.t,string	exec: execInternal(path: string)	
execDictionary	vm/exec.html#execDictionary,Value	exec: execDictionary(blk: Value): ValueDict	
execFunction	vm/exec.html#execFunction,Value,Hash	exec: execFunction(fun: Value; fid: Hash)	
ExecLoop	vm/exec.html#ExecLoop,ValueArray,VBinary	exec: ExecLoop(cnst: ValueArray; it: VBinary)	
